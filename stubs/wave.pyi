"""Type stubs for wave module."""

from pathlib import Path
from typing import Any, BinaryIO, Union

class Wave_file:
    """Unified wave file interface supporting both read and write operations."""
    def close(self) -> None: ...
    # Read methods
    def getnchannels(self) -> int: ...
    def getsampwidth(self) -> int: ...
    def getframerate(self) -> int: ...
    def getnframes(self) -> int: ...
    def getcomptype(self) -> str: ...
    def getcompname(self) -> str: ...
    def getparams(self) -> tuple[int, int, int, int, str, str]: ...
    def readframes(self, nframes: int) -> bytes: ...
    def rewind(self) -> None: ...
    def setpos(self, pos: int) -> None: ...
    # Write methods
    def setnchannels(self, nchannels: int) -> None: ...
    def setsampwidth(self, sampwidth: int) -> None: ...
    def setframerate(self, framerate: int) -> None: ...
    def setnframes(self, nframes: int) -> None: ...
    def setcomptype(self, comptype: str, compname: str) -> None: ...
    def setparams(self, params: tuple[int, int, int, int, str, str]) -> None: ...
    def writeframesraw(self, data: bytes) -> None: ...
    def writeframes(self, data: bytes) -> None: ...
    # Common methods
    def tell(self) -> int: ...
    def __enter__(self) -> "Wave_file": ...
    def __exit__(self, *args: Any) -> None: ...

def open(f: Union[str, Path, BinaryIO], mode: str = "rb") -> Wave_file: ...

class Error(Exception): ...
